name: Build

on:
  workflow_dispatch:

  push:
    branches:
      - develop
  pull_request:
    branches:
      - develop
  release:
    types: [published]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Use Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18.x'

      - name: Authenticate with private NPM package
        run: echo "//registry.npmjs.org/:_authToken=${{ secrets.NPMJS_TOKEN }}" > ~/.npmrc

      - name: Install dependencies
        run: yarn --frozen-lockfile

      - name: Build
        run: yarn build

  setup-tags:
    runs-on: ubuntu-latest
    outputs:
      tags: ${{ steps.toolkit-tags.outputs.tags }}
      labels: ${{ steps.toolkit-tags.outputs.labels }}
      json: ${{ steps.toolkit-tags.outputs.json }}
    steps:
      - uses: actions/checkout@755da8c3cf115ac066823e79a1e1788f8940201b
      - name: Setup tags
        id: toolkit-tags
        uses: docker/metadata-action@57396166ad8aefe6098280995947635806a0e6ea
        with:
          images: eu.gcr.io/dev-container-repo/radix-dapp-toolkit
          tags: |
            type=sha,event=branch
            type=sha,event=pr
            type=semver,pattern={{version}}

  push-docker-image:
    runs-on: ubuntu-latest
    needs: setup-tags
    permissions:
      id-token: write
      contents: read
      pull-requests: read  
    steps:
      - uses: actions/checkout@755da8c3cf115ac066823e79a1e1788f8940201b
      - uses: google-github-actions/auth@a61909d048e0be579b6c15b27088d19668493851
        with:
          workload_identity_provider: ${{ secrets.GCP_WORKLOAD_IDP }}
          service_account: ${{ secrets.GCP_SERVICE_ACCOUNT }}
      - name: configure-docker
        run: gcloud auth configure-docker -q
      - name: Docker build
        uses: docker/build-push-action@c56af957549030174b10d6867f20e78cfd7debc5
        with:
          file: ./Dockerfile
          tags: ${{ needs.setup-tags.outputs.tags }}
          labels: ${{ needs.setup-tags.outputs.labels }}
          push: true
          context: ./

  deploy-pr:
    if: ${{ github.event_name == 'pull_request' }}
    runs-on: ubuntu-latest
    needs:
      - setup-tags
      - push-docker-image
    permissions:
      id-token: write
      contents: read
      pull-requests: read
    steps:
      - uses: actions/checkout@755da8c3cf115ac066823e79a1e1788f8940201b
      - uses: unfor19/install-aws-cli-action@v1
        with:
          version: 2
      - name: Setup helmfile and helm
        uses: mamezou-tech/setup-helmfile@55ae2a66c5af4883148b7a50cc6ddc9b61042184
        with:
          helm-diff-plugin-version: "v3.1.3"
          helmfile-version: "v0.144.0"
          helm-version: "v3.11.0"
          install-kubectl: no
      - name: Install kubectl
        uses: azure/setup-kubectl@901a10e89ea615cf61f57ac05cecdf23e7de06d8 #v3.2
        with:
          version: "v1.25.6"
      - name: Configure AWS credentials to fetch secrets
        uses: aws-actions/configure-aws-credentials@v1-node16
        with:
          role-to-assume: ${{ secrets.SECRETS_IAM_ROLE }}
          aws-region: ${{ secrets.AWS_REGION }}
          role-session-name: AWSDeployRolePR
      - name: Get secrets
        uses: aws-actions/aws-secretsmanager-get-secrets@v1
        with:
          secret-ids: |
            GH, ${{ secrets.AWS_HELM_CREDENTIALS_SECRET }}
          parse-json-secrets: true
      - name: Configure AWS credentials for deployment
        uses: aws-actions/configure-aws-credentials@v1-node16
        with:
          role-to-assume: ${{ secrets.DEPLOY_PR_IAM_ROLE }}
          aws-region: ${{ secrets.AWS_REGION }}
      - name: Deploy application
        working-directory: helm/deploy
        run: |
          cat <<DOC > namespace.yaml
          apiVersion: hnc.x-k8s.io/v1alpha2
          kind: SubnamespaceAnchor
          metadata:
            name: $APPLICATION_NS
            namespace: $APPLICATION_H_NS
          DOC

          kubectl apply -f subns-manifest.yaml

          helmfile --environment pr --namespace ${{ env.APPLICATION_NS }} \
                   --state-values-set "ci.tag=${{ env.CI_TAG }}" \
                   --state-values-set "ci.ingressDomain=${{ env.CI_INGRESS_DOMAIN }}" \
                   apply
        env:
          CI_TAG: ${{ fromJSON(needs.setup-tags.outputs.json).labels['org.opencontainers.image.version'] }}
          CI_INGRESS_DOMAIN: ${{ secrets.PR_INGRESS_DOMAIN }}
          APPLICATION_H_NS: ${{ secrets.DEPLOY_PR_H_NAMESPACE }}
          APPLICATION_NS: ${{ secrets.DEPLOY_PR_NAMESPACE }}
          HELM_GH_USER: ${{ env.GH_HELM_GH_USER }}
          HELM_GH_PASS: ${{ env.GH_HELM_GH_PASS }}
